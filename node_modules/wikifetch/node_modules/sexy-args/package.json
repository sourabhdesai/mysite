{
  "name": "sexy-args",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/index",
  "version": "1.1.5",
  "author": {
    "name": "Ben Coe",
    "email": "bencoe@gmail.com"
  },
  "engines": [
    "node"
  ],
  "description": "A sexy DSL for parsing the arguments passed into functions.",
  "keywords": [
    "arguments",
    "sexy"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/bcoe/node-sexy-args.git"
  },
  "dependencies": {
    "micro-test": "1.0.0"
  },
  "devDependencies": {},
  "readme": "Sexy Arguments\n==============\n\nMotivation\n----------\n\nI was working on one of my JavaScript libraries and noticed I was doing something silly:\n\n*Karait (https://github.com/bcoe/karait)*\n\n```javascript\nexports.Queue = function(params, onQueueReady) {\n    \n    if (typeof(params) === 'function') {\n        onQueueReady = params;\n        params = {};\n    }\n    \n    var defaults = {\n        host: 'localhost',\n        port: 27017,\n        database: 'karait',\n        queue: 'messages',\n        averageMessageSize: 8192,\n        queueSize: 4096\n    };\n    extend(this, defaults, params);\n}\n```\n\nThere's a lot of ritual around dealing with optional arguments and default parameters!\n\nI did a little digging, and found this problem was pretty widespread:\n\n*Node MongoDB Native (https://github.com/christkv/node-mongodb-native)*\n\n```javascript\nCollection.prototype.insertAll = function insertAll (docs, options, callback) {\n  if('function' === typeof options) callback = options, options = {};  \n  if(options == null) options = {};\n  if(!('function' === typeof callback)) callback = null;\n  // ... Function body.\n}\n```\n\n*Express (https://github.com/visionmedia/express)*\n\n```javascript\nres.sendfile = function(path, options, fn){\n  var self = this\n    , req = self.req\n    , next = this.req.next\n    , options = options || {};\n\n  // support function as second arg\n  if ('function' == typeof options) {\n    fn = options;\n    options = {};\n  }\n  // ... Function body.\n};\n```\n\n*JSDom (https://github.com/tmpvar/jsdom)*\n\n```javascript\nexports.jQueryify = exports.jsdom.jQueryify = function (window /* path [optional], callback */) {\n  var args = Array.prototype.slice.call(arguments),\n      callback = (typeof(args[args.length - 1]) === 'function') && args.pop(),\n      path,\n      jQueryTag = window.document.createElement(\"script\");\n\n  if (args.length > 1 && typeof(args[1] === 'string')) {\n    path = args[1];\n  }\n  // ... Function body.\n}\n```\n\nThe Solution? Sexy Arguments\n----------------------------\n\nsexy-args is DSL for:\n\n* Handling optional parameters.\n* Enforcing types.\n* Handling default values.\n\nsexy-args enforces sane defaults:\n\n* Arrays default to [].\n* Objects default to {}.\n* functions default to function() {}.\n* Extend is used by default when assigning default values for an object.\n* The common [options, callback] method signature is used by default:\n\nSo,\n\n```javascript\nexports.func = function(options, callback) {\n    if (typeof(options) === 'function') {\n        callback = options;\n        options = {};\n    }\n\tcallback = callback || function() {};\n\t// ... Function body.\n}\n```\n\nBecomes:\n\n```javascript\nexports.func = function(options, callback) {\n\tsexy.args([this], function() {\n\t// ... Function body.\n\t});\n}\n```\n\nA World With Sexy Arguments\n---------------------------\n\nHere's what those prior examples would look like if they were using sexy-args:\n\n*Karait*\n\n```javascript\nexports.Queue = function(params, onQueueReady) {\n\tsexy.args([this, ['object1', 'function1'], 'function1'], {\n\t\tobject1: {\n\t\t\thost: 'localhost',\n\t\t\tport: 27017,\n\t\t\tdatabase: 'karait',\n\t\t\tqueue: 'messages',\n\t\t\taverageMessageSize: 8192,\n\t\t\tqueueSize: 4096\n\t\t}\n\t}, function() {\n\t\tsexy.extend(this, params);\n\t});\n}\n```\n\n*Express*\n\n```javascript\nres.sendfile = function(path, options, fn){\n\tsexy.args([this, 'string1', ['object1', 'function1'], 'function1'], function() {\n\t\tvar self = this,\n\t\t\treq = self.req,\n\t\t\tnext = this.req.next;\n  \t\t// ... Function body.\n\t});\n};\n```\n\n*JSDom*\n\n```javascript\nexports.jQueryify = exports.jsdom.jQueryify = function (window, path, callback) {\n\tsexy.args([this, 'object1', ['string1', 'function1'], 'function1'], function() {\n\t\tvar jQueryTag = window.document.createElement(\"script\");\n\t\t// ... Function body.\n\t});\n}\n```\n\nI think this is much cleaner, which is the goal of sexy-args. Why repeat ritualistic syntax over and over again.\n\nThe DSL\n-------\n\n* The first parameter to the sexy.args closure is an array describing the method signature.\n* subarrays are used to describe optional parameters, e.g., _[this, ['object1', 'function1'], 'function1']_ \n  * Indicates that the first parameter could be either an object or a function.\n  * If the first parameter is an object, the second parameter can be a function.\n\nDefault Values\n--------------\n\n* The second parameter given to the sexy.args closure is an object describing default values for each parameter.\n* the keys of the object correspond with the method signature, e.g., for [this, ['object1', 'function1'], function1]\n  * {object1: {foo: 'bar'}} indicates that object1 should default to an object with a single key _foo_ equal to _bar_.\n\nExtends Functionality\n---------------------\n\nTo simplify your life, sexy.args exposes a shorthand for extending objects.\n\n```javascript\nexports.foo = function(path, options, fn){\n\tsexy.args([this, 'string1', ['object1', 'function1'], 'function1'], function() {\n\t\tsexy.extend(this, options);\n\t});\n};\n```\n\nThe above code would extend an instance of _foo_ with the options object.\n\nContributing to sexy-args\n----------------------\n \n* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet\n* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it\n* Fork the project\n* Start a feature/bugfix branch\n* Commit and push until you are happy with your contribution\n* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\n* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\n\nCopyright\n---------\n\nCopyright (c) 2011 Attachments.me. See LICENSE.txt for\nfurther details.",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/bcoe/node-sexy-args/issues"
  },
  "homepage": "https://github.com/bcoe/node-sexy-args",
  "_id": "sexy-args@1.1.5",
  "_from": "sexy-args@>=1.1.5"
}
