{
  "name": "wordpos",
  "author": {
    "name": "Moos",
    "email": "mooster@42at.com"
  },
  "keywords": [
    "natural",
    "language",
    "wordnet",
    "adjectives",
    "nouns",
    "adverbs",
    "verbs"
  ],
  "description": "wordpos is a set of part-of-speech utilities for Node.js using natural's WordNet module.",
  "version": "0.1.15",
  "homepage": "https://github.com/moos/wordpos",
  "engines": {
    "node": ">=0.6"
  },
  "bin": {
    "wordpos": "./bin/wordpos-cli.js"
  },
  "dependencies": {
    "natural": "NaturalNode/natural",
    "underscore": ">=1.3.1",
    "WNdb": "latest",
    "commander": "1.1.1"
  },
  "devDependencies": {
    "uubench": "git://github.com/moos/uubench.git"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/moos/wordpos.git"
  },
  "main": "./src/wordpos.js",
  "scripts": {
    "postinstall": "node tools/stat.js --no-stats index.adv index.adj index.verb index.noun"
  },
  "readme": "wordpos\r\n=======\r\n\r\nwordpos is a set of part-of-speech (POS) utilities for Node.js using [natural's](http://github.com/NaturalNode/natural) WordNet module.\r\n\r\n\r\n## Installation\r\n\r\n     npm install -g wordpos\r\n\r\nTo run spec:\r\n\r\n    npm install -g jasmine-node\r\n    cd spec\r\n    jasmine-node wordpos_spec.js --verbose\r\n    jasmine-node validate_spec.js --verbose\r\n\r\n## Quick usage\r\n\r\nNode.js:\r\n```js\r\nvar WordPOS = require('wordpos'),\r\n    wordpos = new WordPOS();\r\n\r\nwordpos.getAdjectives('The angry bear chased the frightened little squirrel.', function(result){\r\n    console.log(result);\r\n});\r\n// [ 'little', 'angry', 'frightened' ]\r\n\r\nwordpos.isAdjective('awesome', function(result){\r\n    console.log(result);\r\n});\r\n// true 'awesome'\r\n```\r\n\r\nCommand-line:\r\n```bash\r\n$ wordpos def git\r\ngit\r\n  n: a person who is deemed to be despicable or contemptible; \"only a rotter would do that\"; \"kill the rat\"; \"throw the bum out\"; \"you cowardly little pukes!\"; \"the British call a contemptible person a `git'\"  \r\n\r\n$ wordpos def git | wordpos get --adj\r\n# Adjective 6:\r\ndespicable\r\ncontemptible\r\nbum\r\ncowardly\r\nlittle\r\nBritish\r\n```\r\n\r\n### Options\r\n\r\n```js\r\nWordPOS.defaults = {\r\n  /**\r\n   * enable profiling, time in msec returned as last argument in callback\r\n   */\r\n  profile: false,\r\n\r\n  /**\r\n   * use fast index if available\r\n   */\r\n  fastIndex: true,\r\n\r\n  /**\r\n   * if true, exclude standard stopwords.\r\n   * if array, stopwords to exclude, eg, ['all','of','this',...]\r\n   * if false, do not filter any stopwords.\r\n   */\r\n  stopwords: true\r\n};\r\n```\r\nTo override, pass an options hash to the constructor. With the `profile` option, all callbacks receive a last argument that is the execution time in msec of the call.\r\n\r\n```js\r\n    wordpos = new WordPOS({profile: true});\r\n    wordpos.isAdjective('fast', console.log);\r\n    // true 'fast' 29\r\n```\r\n\r\n## API\r\n\r\nPlease note: all API are *async* since the underlying WordNet library is async. WordPOS is a subclass of natural's [WordNet class](https://github.com/NaturalNode/natural#wordnet) and inherits all its methods.\r\n\r\n#### getPOS(text, callback)\r\n#### getNouns(text, callback)\r\n#### getVerbs(text, callback)\r\n#### getAdjectives(text, callback)\r\n#### getAdverbs(text, callback)\r\n\r\nGet part-of-speech from `text`.  `callback(results)` receives and array of words for specified POS, or a hash for `getPOS()`:\r\n\r\n```\r\nwordpos.getPOS(text, callback) -- callback receives a result object:\r\n    {\r\n      nouns:[],       Array of text words that are nouns\r\n      verbs:[],       Array of text words that are verbs\r\n      adjectives:[],  Array of text words that are adjectives\r\n      adverbs:[],     Array of text words that are adverbs\r\n      rest:[]         Array of text words that are not in dict or could not be categorized as a POS\r\n    }\r\n    Note: a word may appear in multiple POS (eg, 'great' is both a noun and an adjective)\r\n```\r\n\r\nIf you're only interested in a certain POS (say, adjectives), using the particular getX() is faster\r\nthan getPOS() which looks up the word in all index files. [stopwords] (https://github.com/NaturalNode/natural/blob/master/lib/natural/util/stopwords.js)\r\nare stripped out from text before lookup.\r\n\r\nIf `text` is an *array*, all words are looked-up -- no deduplication, stopword filter or tokenization is applied.\r\n\r\ngetX() functions (immediately) return the *number* of parsed words that *will be* looked up (less duplicates and stopwords).\r\n\r\nExample:\r\n\r\n```js\r\nwordpos.getNouns('The angry bear chased the frightened little squirrel.', console.log)\r\n// [ 'bear', 'squirrel', 'little', 'chased' ]\r\n\r\nwordpos.getPOS('The angry bear chased the frightened little squirrel.', console.log)\r\n// output:\r\n  {\r\n    nouns: [ 'bear', 'squirrel', 'little', 'chased' ],\r\n    verbs: [ 'bear' ],\r\n    adjectives: [ 'little', 'angry', 'frightened' ],\r\n    adverbs: [ 'little' ],\r\n    rest: [ 'the' ]\r\n  }\r\n\r\n```\r\nThis has no relation to correct grammar of given sentence, where here only 'bear' and 'squirrel'\r\nwould be considered nouns. \r\n\r\n#### isNoun(word, callback)\r\n#### isVerb(word, callback)\r\n#### isAdjective(word, callback)\r\n#### isAdverb(word, callback)\r\n\r\nDetermine if `word` is a particular POS.  `callback(result, word)` receives true/false as first argument and the looked-up word as the second argument.\r\n\r\nExamples:\r\n\r\n```js\r\nwordpos.isVerb('fish', console.log);\r\n// true 'fish'\r\n\r\nwordpos.isNoun('fish', console.log);\r\n// true 'fish'\r\n\r\nwordpos.isAdjective('fishy', console.log);\r\n// true 'fishy'\r\n\r\nwordpos.isAdverb('fishly', console.log);\r\n// false 'fishly'\r\n```\r\n\r\n#### lookupNoun(word, callback)\r\n#### lookupVerb(word, callback)\r\n#### lookupAdjective(word, callback)\r\n#### lookupAdverb(word, callback)\r\n\r\nThese calls are similar to natural's [lookup()](https://github.com/NaturalNode/natural#wordnet) call, except they can be faster if you\r\nalready know the POS of the word.  Signature of the callback is `callback(result, word)` where `result` is an *array* of lookup object(s). \r\n\r\nExample:\r\n\r\n```js\r\nwordpos.lookupAdjective('awesome', console.log);\r\n// output:\r\n[ { synsetOffset: 1282510,\r\n    lexFilenum: 0,\r\n    pos: 's',\r\n    wCnt: 5,\r\n    lemma: 'amazing',\r\n    synonyms: [ 'amazing', 'awe-inspiring', 'awesome', 'awful', 'awing' ],\r\n    lexId: '0',\r\n    ptrs: [],\r\n    gloss: 'inspiring awe or admiration or wonder; \"New York is an amazing city\"; \"the Grand Canyon is an awe-inspiring\r\nsight\"; \"the awesome complexity of the universe\"; \"this sea, whose gently awful stirrings seem to speak of some hidden s\r\noul beneath\"- Melville; \"Westminster Hall\\'s awing majesty, so vast, so high, so silent\"  ' } ], 'awesome'\r\n```\r\nIn this case only one lookup was found.  But there could be several.\r\n\r\nOr use WordNet's (slower) inherited method:\r\n\r\n```js\r\nwordpos.lookup('great', console.log);\r\n// ...\r\n```\r\n\r\n#### rand(options, callback)\r\n#### randNoun(options, callback)\r\n#### randVerb(options, callback)\r\n#### randAdjective(options, callback)\r\n#### randAdverb(options, callback)\r\n\r\nGet random word(s).  (Introduced in version 0.1.10)  `callback(results, startsWith)` receives array of random words and the `startsWith` option, if one was  given. `options`, if given, is:\r\n```\r\n{\r\n  startsWith : <string> -- get random words starting with this\r\n  count : <number> -- number of words to return (default = 1)\r\n}\r\n```\r\nExamples:\r\n```js\r\nwordpos.rand(console.log)\r\n// ['wulfila'] ''\r\n\r\nwordpos.randNoun(console.log)\r\n// ['bamboo_palm'] ''\r\n\r\nwordpos.rand({starstWith: 'foo'}, console.log)\r\n// ['foot'] 'foo'\r\n\r\nwordpos.randVerb({starstWith: 'bar', count: 3}, console.log)\r\n// ['barge', 'barf', 'barter_away'] 'bar'\r\n\r\nwordpos.rand({starsWith: 'zzz'}, console.log)\r\n// [] 'zzz'\r\n```\r\n\r\n**Note on performance**: random lookups could involve heavy disk reads.  It is better to use the `count` option to get words\r\nin batches.  This may benefit from the cached reads of similarly keyed entries as well as shared open/close of the index files.\r\n\r\nGetting random POS (`randNoun()`, etc.) is generally faster than `rand()`, which may look at multiple POS files until `count` requirement\r\nis met.\r\n\r\n#### parse(text) \r\nReturns tokenized array of words in `text`, less duplicates and stopwords. This method is called on all getX() calls internally.\r\n\r\n\r\n#### WordPOS.WNdb \r\nAccess to the [WNdb](https://github.com/moos/WNdb) object containing the dictionary & index files.\r\n\r\n#### WordPOS.natural\r\nAccess to underlying [natural](http://github.com/NaturalNode/natural) module. For example, WordPOS.natural.stopwords is the list of stopwords.\r\n\r\n\r\n## Fast Index\r\n\r\nVersion 0.1.4 introduces `fastIndex` option.  This uses a secondary index on the index files and is much faster. It is on by default.  Secondary index files are generated at install time and placed in the same directory as WNdb.path.  Details can be found in tools/stat.js.\r\n\r\nFast index improves performance **30x** over Natural's native methods. See blog article [Optimizing WordPos](http://blog.42at.com/optimizing-wordpos).\r\n\r\n## Command-line: CLI\r\n\r\nFor CLI usage and examples, see [bin/README](bin). \r\n\r\n\r\n## Benchmark\r\n\r\nNote: `wordpos-bench.js` requires a [forked uubench](https://github.com/moos/uubench) module.\r\n\r\n    cd bench\r\n    node wordpos-bench.js\r\n\r\n\r\n512-word corpus (< v0.1.4, comparable to Natural) :\r\n```\r\n  getPOS : 0 ops/s { iterations: 1, elapsed: 9039 }\r\n  getNouns : 0 ops/s { iterations: 1, elapsed: 2347 }\r\n  getVerbs : 0 ops/s { iterations: 1, elapsed: 2434 }\r\n  getAdjectives : 1 ops/s { iterations: 1, elapsed: 1698 }\r\n  getAdverbs : 0 ops/s { iterations: 1, elapsed: 2698 }\r\ndone in 20359 msecs\r\n```\r\n\r\n512-word corpus (as of v0.1.4, with fastIndex) :\r\n```\r\n  getPOS : 18 ops/s { iterations: 1, elapsed: 57 }\r\n  getNouns : 48 ops/s { iterations: 1, elapsed: 21 }\r\n  getVerbs : 125 ops/s { iterations: 1, elapsed: 8 }\r\n  getAdjectives : 111 ops/s { iterations: 1, elapsed: 9 }\r\n  getAdverbs : 143 ops/s { iterations: 1, elapsed: 7 }\r\ndone in 1375 msecs\r\n```\r\n\r\n220 words are looked-up (less stopwords and duplicates) on a win7/64-bit/dual-core/3GHz.  getPOS() is slowest as it searches through all four index files.\r\n\r\n## Changes\r\n\r\n0.1.15\r\n- Added `syn` (synonym) and `exp` (example) CLI commands.\r\n- Fixed `rand` CLI command when no start word given.\r\n- Removed -N, --num CLI option.  Use `wordpos rand [N]` to get N random numbers.\r\n- Changed CLI option -s to -w (include stopwords).\r\n\r\n0.1.13\r\n- Fix crlf issue for command-line script\r\n\r\n0.1.12 \r\n- fix stopwords not getting excluded when running with CLI\r\n- added 'stopwords' CLI *command* to show list of stopwords\r\n- CLI *option* --stopword now renamed to --withStopwords\r\n\r\n0.1.10 \r\n- rand functionality added\r\n\r\n0.1.6\r\n- added command line tool\r\n\r\n0.1.4\r\n- added fast index \r\n\r\nLicense\r\n-------\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012, 2014 mooster@42at.com\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/moos/wordpos/issues"
  },
  "_id": "wordpos@0.1.15",
  "dist": {
    "shasum": "6de5f54e6782b53be49a00bc6ea39964adafb144"
  },
  "_from": "wordpos@0.1.15",
  "_resolved": "https://registry.npmjs.org/wordpos/-/wordpos-0.1.15.tgz"
}
