{
  "name": "wordpos",
  "author": {
    "name": "Moos",
    "email": "mooster@42at.com"
  },
  "keywords": [
    "natural",
    "language",
    "wordnet",
    "pos"
  ],
  "description": "wordpos is a set of part-of-speech utilities for Node.js using natural's WordNet module.",
  "version": "0.1.9",
  "homepage": "https://github.com/moos/wordpos",
  "engines": {
    "node": ">=0.6"
  },
  "bin": {
    "wordpos": "./bin/wordpos-cli.js"
  },
  "dependencies": {
    "natural": "latest",
    "underscore": ">=1.3.1",
    "WNdb": "latest",
    "commander": "1.1.1"
  },
  "devDependencies": {
    "uubench": "git://github.com/moos/uubench.git"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/moos/wordpos.git"
  },
  "main": "./src/wordpos.js",
  "scripts": {
    "postinstall": "node tools/stat.js --no-stats index.adv index.adj index.verb index.noun"
  },
  "readme": "wordpos\r\n=======\r\n\r\nwordpos is a set of part-of-speech (POS) utilities for Node.js using [natural's](http://github.com/NaturalNode/natural) WordNet module.\r\n\r\n\r\n## Usage\r\n\r\n```js\r\nvar WordPOS = require('wordpos'),\r\n    wordpos = new WordPOS();\r\n\r\nwordpos.getAdjectives('The angry bear chased the frightened little squirrel.', function(result){\r\n    console.log(result);\r\n});\r\n// [ 'little', 'angry', 'frightened' ]\r\n\r\nwordpos.isAdjective('awesome', function(result){\r\n    console.log(result);\r\n});\r\n// true 'awesome'\r\n```\r\n\r\nSee `wordpos_spec.js` for full usage.\r\n\r\n## Installation\r\n\r\n     npm install wordpos\r\n\r\nNote: `wordpos-bench.js` requires a [forked uubench](https://github.com/moos/uubench) module.  To use the CLI (see below), it is recommended to installed globally with -g option.\r\n\r\nTo run spec:\r\n\r\n    npm install jasmine-node -g\r\n    jasmine-node wordpos_spec.js --verbose\r\n    jasmine-node validate_spec.js --verbose\r\n\r\n\r\n## API\r\n\r\nPlease note: all API are async since the underlying WordNet library is async. WordPOS is a subclass of natural's [WordNet class](https://github.com/NaturalNode/natural#wordnet) and inherits all its methods.\r\n\r\n\r\n### getX()...\r\n\r\nGet POS from text.\r\n\r\n```\r\nwordpos.getPOS(text, callback) -- callback receives a result object:\r\n    {\r\n      nouns:[],       Array of text words that are nouns\r\n      verbs:[],       Array of text words that are verbs\r\n      adjectives:[],  Array of text words that are adjectives\r\n      adverbs:[],     Array of text words that are adverbs\r\n      rest:[]         Array of text words that are not in dict or could not be categorized as a POS\r\n    }\r\n    Note: a word may appear in multiple POS (eg, 'great' is both a noun and an adjective)\r\nwordpos.getNouns(text, callback) -- callback receives an array of nouns in text\r\nwordpos.getVerbs(text, callback) -- callback receives an array of verbs in text\r\nwordpos.getAdjectives(text, callback) -- callback receives an array of adjectives in text\r\nwordpos.getAdverbs(text, callback) -- callback receives an array of adverbs in text\r\n```\r\n\r\nIf you're only interested in a certain POS (say, adjectives), using the particular getX() is faster\r\nthan getPOS() which looks up the word in all index files. [stopwords] (https://github.com/NaturalNode/natural/blob/master/lib/natural/util/stopwords.js)\r\nare stripped out from text before lookup.\r\n\r\nIf text is an array, all words are looked-up -- no deduplication, stopword filter or tokenization is applied.\r\n\r\ngetX() functions return the number of parsed words that will be looked up (less duplicates and stopwords).\r\n\r\nExample:\r\n\r\n```js\r\nwordpos.getNouns('The angry bear chased the frightened little squirrel.', console.log)\r\n// [ 'bear', 'squirrel', 'little', 'chased' ]\r\n\r\nwordpos.getPOS('The angry bear chased the frightened little squirrel.', console.log)\r\n// output:\r\n  {\r\n    nouns: [ 'bear', 'squirrel', 'little', 'chased' ],\r\n    verbs: [ 'bear' ],\r\n    adjectives: [ 'little', 'angry', 'frightened' ],\r\n    adverbs: [ 'little' ],\r\n    rest: [ 'the' ]\r\n  }\r\n\r\n```\r\nThis has no relation to correct grammer of given sentence, where here only 'bear' and 'squirrel'\r\nwould be considered nouns.  (see http://nltk.googlecode.com/svn/trunk/doc/book/ch08.html#ex-recnominals)\r\n\r\n[pos-js](https://github.com/fortnightlabs/pos-js), e.g., shows only 'squirrel' as noun:\r\n\r\n    The / DT\r\n    angry / JJ\r\n    bear / VB\r\n    chased / VBN\r\n    the / DT\r\n    frightened / VBN\r\n    little / JJ\r\n    squirrel / NN\r\n\r\n\r\n### isX()...\r\n\r\nDetermine if a word is a particular POS.\r\n\r\n```\r\nwordpos.isNoun(word, callback) -- callback receives result (true/false) if word is a noun.\r\nwordpos.isVerb(word, callback) -- callback receives result (true/false) if word is a verb.\r\nwordpos.isAdjective(word, callback) -- callback receives result (true/false) if word is an adjective.\r\nwordpos.isAdverb(word, callback) -- callback receives result (true/false) if word is an adverb.\r\n```\r\n\r\nisX() methods return the looked-up word as the second argument to the callback.\r\n\r\nExamples:\r\n\r\n```js\r\nwordpos.isVerb('fish', console.log);\r\n// true 'fish'\r\n\r\nwordpos.isNoun('fish', console.log);\r\n// true 'fish'\r\n\r\nwordpos.isAdjective('fishy', console.log);\r\n// true 'fishy'\r\n\r\nwordpos.isAdverb('fishly', console.log);\r\n// false 'fishly'\r\n```\r\n\r\n### lookupX()...\r\n\r\nThese calls are similar to natural's [lookup()](https://github.com/NaturalNode/natural#wordnet) call, except they can be faster if you\r\nalready know the POS of the word.\r\n\r\n```\r\nwordpos.lookupNoun(word, callback) -- callback receives array of lookup objects for a noun\r\nwordpos.lookupVerb(word, callback) -- callback receives array of lookup objects for a verb\r\nwordpos.lookupAdjective(word, callback) -- callback receives array of lookup objects for an adjective\r\nwordpos.lookupAdverb(word, callback) -- callback receives array of lookup objects for an adverb\r\n```\r\n\r\nlookupX() methods return the looked-up word as the second argument to the callback.\r\n\r\nExample:\r\n\r\n```js\r\nwordpos.lookupAdjective('awesome', console.log);\r\n// output:\r\n[ { synsetOffset: 1282510,\r\n    lexFilenum: 0,\r\n    pos: 's',\r\n    wCnt: 5,\r\n    lemma: 'amazing',\r\n    synonyms: [ 'amazing', 'awe-inspiring', 'awesome', 'awful', 'awing' ],\r\n    lexId: '0',\r\n    ptrs: [],\r\n    gloss: 'inspiring awe or admiration or wonder; \"New York is an amazing city\"; \"the Grand Canyon is an awe-inspiring\r\nsight\"; \"the awesome complexity of the universe\"; \"this sea, whose gently awful stirrings seem to speak of some hidden s\r\noul beneath\"- Melville; \"Westminster Hall\\'s awing majesty, so vast, so high, so silent\"  ' } ], 'awesome'\r\n```\r\nIn this case only one lookup was found.  But there could be several.\r\n\r\n\r\nOr use WordNet's inherited method:\r\n\r\n```js\r\nwordpos.lookup('great', console.log);\r\n// ...\r\n```\r\n\r\n### Other methods/properties\r\n\r\n```\r\nWordPOS.WNdb -- access to the WNdb object\r\nWordPOS.natural -- access to underlying 'natural' module\r\nwordpos.parse(str) -- returns tokenized array of words, less duplicates and stopwords.  This method is called on all getX() calls internally.\r\n```\r\nE.g., WordPOS.natural.stopwords is the list of stopwords.\r\n\r\n\r\n### Options\r\n\r\n```js\r\nWordPOS.defaults = {\r\n  /**\r\n   * enable profiling, time in msec returned as last argument in callback\r\n   */\r\n  profile: false,\r\n\r\n  /**\r\n   * use fast index if available\r\n   */\r\n  fastIndex: true,\r\n\r\n  /**\r\n   * if true, exclude standard stopwords.\r\n   * if array, stopwords to exclude, eg, ['all','of','this',...]\r\n   * if false, do not filter any stopwords.\r\n   */\r\n  stopwords: true\r\n};\r\n```\r\nTo override, pass an options hash to the constructor. With the `profile` option, all callbacks receive a second argument that is the execution time in msec of the call.\r\n\r\n```js\r\n    wordpos = new WordPOS({profile: true});\r\n    wordpos.isAdjective('fast', console.log);\r\n    // true 'fast' 29\r\n```\r\n\r\n### Fast Index\r\n\r\nVersion 0.1.4 introduces `fastIndex` option.  This uses a secondary index on the index files and is much faster. It is on by default.  Secondary index files are generated at install time and placed in the same directory as WNdb.path.  Details can be found in tools/stat.js.\r\n\r\nSee blog article [Optimizing WordPos](http://blog.42at.com/optimizing-wordpos).\r\n\r\n## CLI\r\n\r\nVersion 0.1.6 introduces the command-line interface (./bin/wordpos-cli.js), available as 'wordpos' if installed globally\r\n\"npm install wordpos -g\", otherwise as 'node_modules/.bin/wordpos' if installed without the -g.\r\n\r\n```bash\r\n$ wordpos get The angry bear chased the frightened little squirrel\r\n# Noun 4:\r\nbear\r\nchased\r\nlittle\r\nsquirrel\r\n\r\n# Adjective 3:\r\nangry\r\nfrightened\r\nlittle\r\n\r\n# Verb 1:\r\nbear\r\n\r\n# Adverb 1:\r\nlittle\r\n```\r\nJust the nouns, brief output:\r\n```bash\r\n$ wordpos get --noun -b The angry bear chased the frightened little squirrel\r\nbear chased little squirrel\r\n```\r\nJust the counts: (nouns, adjectives, verbs, adverbs, total parsed words)\r\n```bash\r\n$ wordpos get -c The angry bear chased the frightened little squirrel\r\n4 3 1 1 7\r\n```\r\nJust the adjective count: (0, adjectives, 0, 0, total parsed words)\r\n```bash\r\n$ wordpos get --adj -c The angry bear chased the frightened little squirrel\r\n0 3 0 0 7\r\n```\r\n\r\nGet definitions:\r\n```bash\r\n$ wordpos def git\r\ngit\r\n  n: a person who is deemed to be despicable or contemptible; \"only a rotter would do that\"; \"kill the rat\"; \"throw the bum out\"; \"you cowardly little pukes!\"; \"the British call a contemptible persona `git'\"\r\n```\r\nGet full result object:\r\n```bash\r\n$ wordpos def git -f\r\n{ git:\r\n   [ { synsetOffset: 10539715,\r\n       lexFilenum: 18,\r\n       pos: 'n',\r\n       wCnt: 0,\r\n       lemma: 'rotter',\r\n       synonyms: [],\r\n       lexId: '0',\r\n       ptrs: [],\r\n       gloss: 'a person who is deemed to be despicable or contemptible; \"only a rotter would do that\r\n\"; \"kill the rat\"; \"throw the bum out\"; \"you cowardly little pukes!\"; \"the British call a contemptib\r\nle person a `git\\'\"  ' } ] }\r\n```\r\nAs JSON:\r\n```bash\r\n$ wordpos def git -j\r\n{\"git\":[{\"synsetOffset\":10539715,\"lexFilenum\":18,\"pos\":\"n\",\"wCnt\":0,\"lemma\":\"rotter\",\"synonyms\":[],\"\r\nlexId\":\"0\",\"ptrs\":[],\"gloss\":\"a person who is deemed to be despicable or contemptible; \\\"only a rotter\r\nwould do that\\\"; \\\"kill the rat\\\"; \\\"throw the bum out\\\"; \\\"you cowardly little pukes!\\\"; \\\"the British\r\ncall a contemptible person a `git'\\\"  \"}]}\r\n```\r\nUsage:\r\n```bash\r\n$ wordpos\r\n\r\n  Usage: wordpos-cli.js [options] <command> [word ... | -i <file> | <stdin>]\r\n\r\n  Commands:\r\n\r\n    get\r\n    get list of words for particular POS\r\n\r\n    def\r\n    lookup definitions\r\n\r\n    parse\r\n    show parsed words, deduped and less stopwords\r\n\r\n  Options:\r\n\r\n    -h, --help         output usage information\r\n    -V, --version      output the version number\r\n    -n, --noun         Get nouns\r\n    -a, --adj          Get adjectives\r\n    -v, --verb         Get verbs\r\n    -r, --adv          Get adverbs\r\n    -c, --count        count only (noun, adj, verb, adv, total parsed words)\r\n    -b, --brief        brief output (all on one line, no headers)\r\n    -f, --full         full results object\r\n    -j, --json         full results object as JSON\r\n    -i, --file <file>  input file\r\n    -s, --stopwords    include stopwords\r\n```\r\n\r\n## Benchmark\r\n\r\n    node wordpos-bench.js\r\n\r\n\r\n512-word corpus (< v0.1.4) :\r\n```\r\n  getPOS : 0 ops/s { iterations: 1, elapsed: 9039 }\r\n  getNouns : 0 ops/s { iterations: 1, elapsed: 2347 }\r\n  getVerbs : 0 ops/s { iterations: 1, elapsed: 2434 }\r\n  getAdjectives : 1 ops/s { iterations: 1, elapsed: 1698 }\r\n  getAdverbs : 0 ops/s { iterations: 1, elapsed: 2698 }\r\ndone in 20359 msecs\r\n```\r\n\r\n512-word corpus (as of v0.1.4, with fastIndex) :\r\n```\r\n  getPOS : 18 ops/s { iterations: 1, elapsed: 57 }\r\n  getNouns : 48 ops/s { iterations: 1, elapsed: 21 }\r\n  getVerbs : 125 ops/s { iterations: 1, elapsed: 8 }\r\n  getAdjectives : 111 ops/s { iterations: 1, elapsed: 9 }\r\n  getAdverbs : 143 ops/s { iterations: 1, elapsed: 7 }\r\ndone in 1375 msecs\r\n```\r\n\r\n220 words are looked-up (less stopwords and duplicates) on a win7/64-bit/dual-core/3GHz.  getPOS() is slowest as it searches through all four index files.\r\n\r\n\r\nLicense\r\n-------\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012, 2014 mooster@42at.com\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/moos/wordpos/issues"
  },
  "_id": "wordpos@0.1.9",
  "dist": {
    "shasum": "651e457910566bd3eb8131bcfbd65da2107e5c48"
  },
  "_from": "wordpos@",
  "_resolved": "https://registry.npmjs.org/wordpos/-/wordpos-0.1.9.tgz"
}
